from . import credentials as credentials, errors as errors
from .types._io import PathType
from .utils import config as config
from _typeshed import Incomplete

INDEX_NAME: str
INDEX_URL: Incomplete
TOKEN_USERNAME: str
log: Incomplete

def resolve_repository_name(repo_name) -> tuple[str, str]: ...
def resolve_index_name(index_name) -> str: ...
def get_config_header(client, registry) -> bytes | None: ...
def split_repo_name(repo_name: str) -> tuple[str, ...]: ...
def get_credential_store(authconfig, registry): ...

class AuthConfig(dict):
    def __init__(self, dct: dict, credstore_env: Incomplete | None = ...): ...
    @classmethod
    def parse_auth(cls, entries: dict, raise_on_error: bool = ...) -> dict: ...
    @classmethod
    def load_config(
        cls,
        config_path: PathType,
        config_dict: dict,
        credstore_env: Incomplete | None = ...,
    ) -> AuthConfig: ...
    @property
    def auths(self) -> dict: ...
    @property
    def creds_store(self) -> Incomplete | None: ...
    @property
    def cred_helpers(self) -> dict: ...
    @property
    def is_empty(self) -> bool: ...
    def resolve_authconfig(
        self, registry: Incomplete | None = ...
    ) -> Incomplete | None: ...
    def get_credential_store(self, registry: str) -> Incomplete: ...
    def get_all_credentials(self) -> Incomplete: ...
    def add_auth(self, reg, data) -> None: ...

def resolve_authconfig(
    authconfig,
    registry: Incomplete | None = ...,
    credstore_env: Incomplete | None = ...,
): ...
def convert_to_hostname(url) -> str: ...
def decode_auth(auth: Incomplete) -> tuple[Incomplete, Incomplete]: ...
def encode_header(auth: Incomplete) -> Incomplete: ...
def parse_auth(entries: dict, raise_on_error: bool = ...) -> dict: ...
def load_config(
    config_path: Incomplete | None = ...,
    config_dict: Incomplete | None = ...,
    credstore_env: Incomplete | None = ...,
) -> Incomplete: ...
