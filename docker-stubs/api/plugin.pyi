from typing import Generator, Iterator

from .. import auth as auth, utils as utils
from _typeshed import Incomplete

from ..types._io import Json
from ..types._io import JsonDict
from ..types._io import ResponseResult
from ..types.misc_types import TrueOnSuccess

class PluginApiMixin:
    def configure_plugin(
        self, name: str, options: dict[Incomplete, Incomplete]
    ) -> TrueOnSuccess: ...
    def create_plugin(
        self, name: str, plugin_data_dir: str, gzip: bool = ...
    ) -> TrueOnSuccess: ...
    def disable_plugin(self, name: str, force: bool = ...) -> TrueOnSuccess: ...
    def enable_plugin(self, name: str, timeout: int = ...) -> TrueOnSuccess: ...
    def inspect_plugin(self, name: str) -> JsonDict: ...
    def pull_plugin(
        self, remote: str, privileges: list[Incomplete], name: str | None = ...
    ) -> Iterator[ResponseResult]: ...
    def plugins(self) -> list[dict[str, Json]]: ...
    def plugin_privileges(self, name: str) -> list[dict[str, Json]]: ...
    def push_plugin(self, name: str) -> Generator[ResponseResult, None, None]: ...
    def remove_plugin(self, name: str, force: bool = ...) -> TrueOnSuccess: ...
    def upgrade_plugin(
        self, name: str, remote: str, privileges: list[Incomplete]
    ) -> Iterator[ResponseResult]: ...
