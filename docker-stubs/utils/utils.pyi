from .. import errors as errors
from ..constants import (
    BYTE_UNITS as BYTE_UNITS,
    DEFAULT_HTTP_HOST as DEFAULT_HTTP_HOST,
    DEFAULT_NPIPE as DEFAULT_NPIPE,
    DEFAULT_UNIX_SOCKET as DEFAULT_UNIX_SOCKET,
)
from ..tls import TLSConfig as TLSConfig
from _typeshed import Incomplete
from typing import NamedTuple

from ..types._io import JsonString

class URLComponents(NamedTuple):
    scheme: Incomplete
    netloc: Incomplete
    url: Incomplete
    params: Incomplete
    query: Incomplete
    fragment: Incomplete

def create_ipam_pool(*args: Incomplete, **kwargs: Incomplete) -> None: ...
def create_ipam_config(*args: Incomplete, **kwargs: Incomplete) -> None: ...
def decode_json_header(header): ...
def compare_version(v1, v2): ...
def version_lt(v1, v2): ...
def version_gte(v1, v2): ...
def convert_port_bindings(port_bindings): ...
def convert_volume_binds(binds): ...
def convert_tmpfs_mounts(tmpfs): ...
def convert_service_networks(networks): ...
def parse_repository_tag(repo_name): ...
def parse_host(addr, is_win32: bool = ..., tls: bool = ...): ...
def parse_devices(devices): ...
def kwargs_from_env(environment: Incomplete | None = ...): ...
def convert_filters(filters: dict[str, bool | list]) -> JsonString: ...
def datetime_to_timestamp(dt): ...
def parse_bytes(s): ...
def normalize_links(links): ...
def parse_env_file(env_file): ...
def split_command(command): ...
def format_environment(environment): ...
def format_extra_hosts(extra_hosts, task: bool = ...): ...
def create_host_config(self, *args, **kwargs) -> None: ...
