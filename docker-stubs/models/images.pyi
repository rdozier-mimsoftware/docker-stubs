from typing import Generator
from typing import List

from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import (
    BuildError as BuildError,
    ImageLoadError as ImageLoadError,
    InvalidArgument as InvalidArgument,
)
from ..types.io import Json
from ..types.io import ResponseResult
from ..types.misc_types import TrueOnSuccess
from ..utils import parse_repository_tag as parse_repository_tag
from ..utils.json_stream import json_stream as json_stream
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete

class Image(Model):
    @property
    def labels(self) -> dict: ...
    @property
    def short_id(self) -> str: ...
    @property
    def tags(self) -> list[str]: ...
    def history(self) -> str: ...
    def remove(self, force: bool = ..., noprune: bool = ...) -> Json: ...
    def save(self, chunk_size: int = ..., named: bool = ...) -> Generator[ResponseResult, None, None]: ...
    def tag(self, repository: str, tag: str | None = ..., **kwargs) -> TrueOnSuccess: ...

class RegistryData(Model):
    image_name: Incomplete
    def __init__(self, image_name: str, *args, **kwargs) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def short_id(self) -> str: ...
    def pull(self, platform: str | None = ...) -> Image: ...
    def has_platform(self, platform: str | dict) -> bool: ...
    attrs: Incomplete
    def reload(self) -> None: ...

class ImageCollection(Collection):
    model = Image
    def build(self, **kwargs) -> tuple[Image, Generator[Incomplete, None, None]]: ...
    def get(self, name: str) -> Image: ...
    def get_registry_data(self, name: str, auth_config: dict | None = ...) -> RegistryData: ...
    def list(
        self,
        name: str | None = ...,
        all: bool = ...,
        filters: dict | None = ...,
    ) -> List[Image]: ...
    def load(self, data) -> List[Image]: ...
    def pull(
        self, repository: str, tag: str | None = ..., all_tags: bool = ..., **kwargs
    ) -> Image | List[Image]: ...
    def push(self, repository, tag: Incomplete | None = ..., **kwargs): ...
    def remove(self, *args, **kwargs) -> None: ...
    def search(self, *args, **kwargs): ...
    def prune(self, filters: Incomplete | None = ...): ...
    def prune_builds(self, *args, **kwargs): ...

def normalize_platform(platform, engine_info) -> dict: ...
