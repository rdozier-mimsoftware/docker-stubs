from .. import errors as errors
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete
from collections.abc import Generator

class Plugin(Model):
    @property
    def name(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def settings(self) -> dict: ...
    def configure(self, options: dict) -> None: ...
    def disable(self, force: bool = ...) -> None: ...
    def enable(self, timeout: int = ...) -> None: ...
    def push(self): ...
    def remove(self, force: bool = ...): ...
    def upgrade(
        self, remote: str | None = ...
    ) -> Generator[Incomplete, None, None]: ...

class PluginCollection(Collection):
    model = Plugin
    def create(self, name: str, plugin_data_dir: str, gzip: bool = ...) -> Plugin: ...
    def get(self, name: str) -> Plugin: ...
    def install(self, remote_name: str, local_name: str | None = ...) -> Plugin: ...
    def list(self) -> list[Plugin]: ...
